#*****************  Source ************************************************

BRANCHES := application gui
SRC := $(foreach b, $(BRANCHES), $(wildcard src/$(b)/*.cpp))

OBJ := # Extension depends on target OS
OBJEXT :=

#*****************  Pre-processor  ****************************************

INCDIR = -I ./include

#*****************  Compiler  *********************************************

CXXFLAGS := -g -fPIC -std=c++11 -fpermissive # Determined by platform and args
CXX :=

#*****************  Linker  ***********************************************

LIBS := -lctk -lncurses -lboost_filesystem -lboost_system
LIBDIR =

#*****************  Cross-Platform  ***************************************

OS :=$(shell uname)
TARGET := # Depends on host OS and target= argument
BUILDDIR :=
APPEXT := # Depends on target OS

ifeq ($(OS), Linux)
	ifeq ($(target), windows)
		CXX := x86_64-w64-mingw32-g++
		CXXFLAGS += -static-libgcc -static-libstdc++ 
		LIBEXT := .dll
		APPEXT := .exe
		TARGET := windows
		OBJEXT := .obj
	else
		LIBEXT := .so
		CXX := g++
		TARGET := linux
		OBJEXT := .o
		SYSLIB := /usr/lib
		SYSINC := /usr/include
		SYSBIN := /usr/bin
	endif
else
	LIBEXT := .dll
	APPEXT := .exe
	TARGET := windows
	OBJEXT := .obj
endif

#*****************  Build  ************************************************

MAIN := ncursespp
ifeq ($(strip $(test)),)
	ifeq ($(strip $(name)),)
		TARGETAPP := $(MAIN)
		BUILDDIR := ./
	else
		TARGETAPP := $(name)
		SRC += src/main/$(name).cpp
		BUILDDIR := bin/$(TARGET)/
	endif
else
	BUILDDIR := bin/$(TARGET)/test/
	SRC += src/test/$(test).cpp
	TARGETAPP :=$(test)
endif

OBJ := $(SRC:.cpp=$(OBJEXT)) # Objects used in linking differ on compiler/target

DEP := $(OBJS:$(OBJEXT)=.d)

APP := $(TARGETAPP)$(APPEXT) # Isolate executable and library file names on their own
LIB := lib$(MAIN)$(LIBEXT)
TARGETAPP := $(BUILDDIR)$(APP)
TARGETLIB := lib/$(TARGET)/$(LIB)

#*****************  Rules *************************************************

.PHONY: depend clean cleandep shared program install appinstall appuninstall uninstall variables args help 

all:    $(OBJ)
	@echo
	@echo $(MAIN) objects have been successfully compiled and are up to date. 
	@echo
	@echo Use "make help" for a list of functions this makefile is capable of.
	@echo
	@echo This makefile was generated by the Workflow Development Environment. Always remember, 
	@echo progress is more important than perfection!
	@echo

help:
	@echo
	@echo Welcome to the standard makefile for Roguelight C++ applications. \
		This program is capable of many functions to assist in the production of \
		executables and libraries for your programs.
	@echo The list of functions is as follows:
	@echo
	@echo "make ; Default behaviour is to compile objects without linking."
	@echo
	@echo "make program [name/test]= ; Link object files into executable. Default program name is $(MAIN)"
	@echo
	@echo "make shared ; Link object files into dynamic library"
	@echo
	@echo "make variables ; Print out list of variables used in this makefile."
	@echo
	@echo "make install ; Install project library files to system."
	@echo
	@echo "make appinstall [name/test]= ; Install project executable to system. Default name is $(TARGETAPP)"
	@echo
	@echo "make uninstall ; Remove project library files from system"
	@echo
	@echo "make appuninstall [name/test]= ; Remove project executable from system. Default name is $(APP)"
	@echo
	@echo "make clean ; Removes object files for target"
	@echo
	@echo "make args ; list all optional arguments that can be passed to this makefile"
	@echo
	@echo This makefile was generated by the Workflow Development Environment. Always remember to prioritise
	@echo progress over perfection!
	@echo

variables:
	@echo
	@echo OS: $(OS)
	@echo CXX: $(CXX)
	@echo CXXFLAGS: $(CXXFLAGS)
	@echo TARGETAPP: $(TARGETAPP)
	@echo APP: $(APP)
	@echo TARGETLIB: $(TARGETLIB)
	@echo LIB: $(LIB)
	@echo BUILDDIR: $(BUILDDIR)
	@echo LIBS: $(LIBS)
	@echo INCDIR: $(INCDIR)
	@echo LIBDIR: $(LIBDIR)
	@echo DEP: $(DEP)
	@echo SYSBIN: $(SYSBIN)
	@echo SYSLIB: $(SYSLIB)
	@echo SYSINC: $(SYSINC)
	@echo

args:
	@echo "name: Used to specify a name for generated executables other than $(MAIN)"
	@echo "test: Used to specify that a test executable is being built and to ignore the main executable."
	@echo
	@echo "Note that the difference between test and name is only the path of the build, this means test programs will not"
	@echo "be installed with 'make install'"
	@echo
	@echo "target: Used to specify a target that is different from the host operating system."
	@echo "Currently this makefile only supports the x86_64 Mingw Cross-compiler for Linux"

shared: $(TARGETLIB)
	@echo
	@echo Library $(TARGETLIB) is up to date.
	@echo

program: $(TARGETAPP)
	@echo
	@echo Program $(TARGETAPP) is up to date.
	@echo

profile: 

$(TARGETAPP): $(OBJ)
	@echo Linking objects and dependencies into executable: $(TARGETAPP)
	$(CXX) $(CXXFLAGS) $(INCDIR) $(LIBDIR) -o $(TARGETAPP) $(OBJ) $(LIBS)
	@echo Successful.

%.obj:%.cpp
	$(CXX) $(CXXFLAGS) $(INCDIR) -c $<  -o $@

.cpp.o:
	$(CXX) $(CXXFLAGS) $(INCDIR) -c $<  -o $@

%.d: %cpp
	$(CPP) $(CXXFLAGS) $< -MM -MT $(@:.d=.o) >$@

clean:
	$(RM) $(OBJ)

cleandep:
	$(RM) -f $(DEP)

$(TARGETLIB): $(OBJ) 
	@echo Linking objects for shared library $(TARGETLIB)
	$(CXX) $(LIBDIR) --shared -o $@ $(OBJ) $(LIBS)
	@echo Successful.

install:
	@echo Installing $(MAIN) header files to system path $(SYSINC)/
	cp -r include/$(MAIN) $(SYSINC)
	@echo Installing $(LIB) to system path $(SYSLIB)/
	cp $(TARGETLIB) $(SYSLIB) 

appinstall:
	@echo Installing $(TARGETAPP) to system binary cache $(SYSBIN)/
	cp $(TARGETAPP) $(SYSBIN)

uninstall:
	@echo Removing $(MAIN) header files from system path $(SYSINC)/
	rm -r $(SYSINC)/$(MAIN)
	@echo Removing $(LIB) from system path $(SYSLIB)/
	rm $(SYSLIB)/$(LIB)

appuninstall:
	@echo Removing $(APP) from system binary cache $(SYSBIN)/
	rm $(SYSBIN)/$(APP)

